name: Release AMI

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    # runs-on: [self-hosted, linux]
    runs-on: [arm-runner]
    timeout-minutes: 150

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - id: args
        uses: mikefarah/yq@master
        with:
          cmd: yq 'to_entries | map(select(.value|type == "!!str")) |  map(.key + "=" + .value) | join(" ")' 'ansible/vars.yml'
      - run: docker context create builders
      - uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders
      - uses: docker/build-push-action@v3
        with:
          push: false
          load: true
          context: ansible
          target: extensions
          tags: supabase/postgres:extensions
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Extract built packages
        run: |
          mkdir -p ansible/extensions/packages
          docker save supabase/postgres:extensions | tar xv -C ansible/extensions
          for layer in ansible/extensions/*/layer.tar; do
            tar xvf "$layer" -C ansible/extensions/packages --strip-components 1
          done

      - name: Build AMI
        run: |
          GIT_SHA=${{github.sha}}
          packer build -var "git-head-version=${GIT_SHA}" -var "packer-execution-id=${GITHUB_RUN_ID}" -var-file="development-arm.vars.pkr.hcl" -var-file="common.vars.pkr.hcl" amazon-arm64.pkr.hcl

      - name: Grab release version
        id: process_release_version
        run: |
          VERSION=$(sed -e 's/postgres-version = "\(.*\)"/\1/g' common.vars.pkr.hcl)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.process_release_version.outputs.version }}
          tag_name: ${{ steps.process_release_version.outputs.version }}
          target_commitish: ${{github.sha}}

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFICATIONS_WEBHOOK }}
          SLACK_USERNAME: 'gha-failures-notifier'
          SLACK_COLOR: 'danger'
          SLACK_MESSAGE: 'Building Postgres AMI failed'
          SLACK_FOOTER: ''

      - name: Cleanup resources on build cancellation
        if: ${{ cancelled() }}
        run: |
          aws ec2 describe-instances --filters "Name=tag:packerExecutionId,Values=${GITHUB_RUN_ID}" --query "Reservations[].Instances[].InstanceId" --output text | xargs -I {} aws ec2 terminate-instances --instance-ids {}
